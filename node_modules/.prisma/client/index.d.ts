
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model InstagramMedia
 * 
 */
export type InstagramMedia = $Result.DefaultSelection<Prisma.$InstagramMediaPayload>
/**
 * Model InstagramMediaInsights
 * 
 */
export type InstagramMediaInsights = $Result.DefaultSelection<Prisma.$InstagramMediaInsightsPayload>
/**
 * Model FacebookMedia
 * 
 */
export type FacebookMedia = $Result.DefaultSelection<Prisma.$FacebookMediaPayload>
/**
 * Model FacebookMediaInsights
 * 
 */
export type FacebookMediaInsights = $Result.DefaultSelection<Prisma.$FacebookMediaInsightsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more UserProfiles
 * const userProfiles = await prisma.userProfile.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more UserProfiles
   * const userProfiles = await prisma.userProfile.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs>;

  /**
   * `prisma.instagramMedia`: Exposes CRUD operations for the **InstagramMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstagramMedias
    * const instagramMedias = await prisma.instagramMedia.findMany()
    * ```
    */
  get instagramMedia(): Prisma.InstagramMediaDelegate<ExtArgs>;

  /**
   * `prisma.instagramMediaInsights`: Exposes CRUD operations for the **InstagramMediaInsights** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InstagramMediaInsights
    * const instagramMediaInsights = await prisma.instagramMediaInsights.findMany()
    * ```
    */
  get instagramMediaInsights(): Prisma.InstagramMediaInsightsDelegate<ExtArgs>;

  /**
   * `prisma.facebookMedia`: Exposes CRUD operations for the **FacebookMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookMedias
    * const facebookMedias = await prisma.facebookMedia.findMany()
    * ```
    */
  get facebookMedia(): Prisma.FacebookMediaDelegate<ExtArgs>;

  /**
   * `prisma.facebookMediaInsights`: Exposes CRUD operations for the **FacebookMediaInsights** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookMediaInsights
    * const facebookMediaInsights = await prisma.facebookMediaInsights.findMany()
    * ```
    */
  get facebookMediaInsights(): Prisma.FacebookMediaInsightsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    UserProfile: 'UserProfile',
    InstagramMedia: 'InstagramMedia',
    InstagramMediaInsights: 'InstagramMediaInsights',
    FacebookMedia: 'FacebookMedia',
    FacebookMediaInsights: 'FacebookMediaInsights'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "userProfile" | "instagramMedia" | "instagramMediaInsights" | "facebookMedia" | "facebookMediaInsights"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      InstagramMedia: {
        payload: Prisma.$InstagramMediaPayload<ExtArgs>
        fields: Prisma.InstagramMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstagramMediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstagramMediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>
          }
          findFirst: {
            args: Prisma.InstagramMediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstagramMediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>
          }
          findMany: {
            args: Prisma.InstagramMediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>[]
          }
          create: {
            args: Prisma.InstagramMediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>
          }
          createMany: {
            args: Prisma.InstagramMediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstagramMediaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>[]
          }
          delete: {
            args: Prisma.InstagramMediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>
          }
          update: {
            args: Prisma.InstagramMediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>
          }
          deleteMany: {
            args: Prisma.InstagramMediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstagramMediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InstagramMediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaPayload>
          }
          aggregate: {
            args: Prisma.InstagramMediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstagramMedia>
          }
          groupBy: {
            args: Prisma.InstagramMediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstagramMediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstagramMediaCountArgs<ExtArgs>
            result: $Utils.Optional<InstagramMediaCountAggregateOutputType> | number
          }
        }
      }
      InstagramMediaInsights: {
        payload: Prisma.$InstagramMediaInsightsPayload<ExtArgs>
        fields: Prisma.InstagramMediaInsightsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstagramMediaInsightsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstagramMediaInsightsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>
          }
          findFirst: {
            args: Prisma.InstagramMediaInsightsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstagramMediaInsightsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>
          }
          findMany: {
            args: Prisma.InstagramMediaInsightsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>[]
          }
          create: {
            args: Prisma.InstagramMediaInsightsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>
          }
          createMany: {
            args: Prisma.InstagramMediaInsightsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstagramMediaInsightsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>[]
          }
          delete: {
            args: Prisma.InstagramMediaInsightsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>
          }
          update: {
            args: Prisma.InstagramMediaInsightsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>
          }
          deleteMany: {
            args: Prisma.InstagramMediaInsightsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstagramMediaInsightsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InstagramMediaInsightsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstagramMediaInsightsPayload>
          }
          aggregate: {
            args: Prisma.InstagramMediaInsightsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstagramMediaInsights>
          }
          groupBy: {
            args: Prisma.InstagramMediaInsightsGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstagramMediaInsightsGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstagramMediaInsightsCountArgs<ExtArgs>
            result: $Utils.Optional<InstagramMediaInsightsCountAggregateOutputType> | number
          }
        }
      }
      FacebookMedia: {
        payload: Prisma.$FacebookMediaPayload<ExtArgs>
        fields: Prisma.FacebookMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacebookMediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacebookMediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>
          }
          findFirst: {
            args: Prisma.FacebookMediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacebookMediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>
          }
          findMany: {
            args: Prisma.FacebookMediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>[]
          }
          create: {
            args: Prisma.FacebookMediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>
          }
          createMany: {
            args: Prisma.FacebookMediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacebookMediaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>[]
          }
          delete: {
            args: Prisma.FacebookMediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>
          }
          update: {
            args: Prisma.FacebookMediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>
          }
          deleteMany: {
            args: Prisma.FacebookMediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacebookMediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FacebookMediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaPayload>
          }
          aggregate: {
            args: Prisma.FacebookMediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacebookMedia>
          }
          groupBy: {
            args: Prisma.FacebookMediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacebookMediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacebookMediaCountArgs<ExtArgs>
            result: $Utils.Optional<FacebookMediaCountAggregateOutputType> | number
          }
        }
      }
      FacebookMediaInsights: {
        payload: Prisma.$FacebookMediaInsightsPayload<ExtArgs>
        fields: Prisma.FacebookMediaInsightsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FacebookMediaInsightsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FacebookMediaInsightsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>
          }
          findFirst: {
            args: Prisma.FacebookMediaInsightsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FacebookMediaInsightsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>
          }
          findMany: {
            args: Prisma.FacebookMediaInsightsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>[]
          }
          create: {
            args: Prisma.FacebookMediaInsightsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>
          }
          createMany: {
            args: Prisma.FacebookMediaInsightsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FacebookMediaInsightsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>[]
          }
          delete: {
            args: Prisma.FacebookMediaInsightsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>
          }
          update: {
            args: Prisma.FacebookMediaInsightsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>
          }
          deleteMany: {
            args: Prisma.FacebookMediaInsightsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FacebookMediaInsightsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FacebookMediaInsightsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacebookMediaInsightsPayload>
          }
          aggregate: {
            args: Prisma.FacebookMediaInsightsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacebookMediaInsights>
          }
          groupBy: {
            args: Prisma.FacebookMediaInsightsGroupByArgs<ExtArgs>
            result: $Utils.Optional<FacebookMediaInsightsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FacebookMediaInsightsCountArgs<ExtArgs>
            result: $Utils.Optional<FacebookMediaInsightsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    id: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    id: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: number | null
    platformId: string | null
    name: string | null
    email: string | null
    username: string | null
    accountType: string | null
    platform: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: number | null
    platformId: string | null
    name: string | null
    email: string | null
    username: string | null
    accountType: string | null
    platform: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    platformId: number
    name: number
    email: number
    username: number
    accountType: number
    platform: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    id?: true
  }

  export type UserProfileSumAggregateInputType = {
    id?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    platformId?: true
    name?: true
    email?: true
    username?: true
    accountType?: true
    platform?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    platformId?: true
    name?: true
    email?: true
    username?: true
    accountType?: true
    platform?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    platformId?: true
    name?: true
    email?: true
    username?: true
    accountType?: true
    platform?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: number
    platformId: string
    name: string | null
    email: string | null
    username: string | null
    accountType: string | null
    platform: string
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platformId?: boolean
    name?: boolean
    email?: boolean
    username?: boolean
    accountType?: boolean
    platform?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platformId?: boolean
    name?: boolean
    email?: boolean
    username?: boolean
    accountType?: boolean
    platform?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    platformId?: boolean
    name?: boolean
    email?: boolean
    username?: boolean
    accountType?: boolean
    platform?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      platformId: string
      name: string | null
      email: string | null
      username: string | null
      accountType: string | null
      platform: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */ 
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'Int'>
    readonly platformId: FieldRef<"UserProfile", 'String'>
    readonly name: FieldRef<"UserProfile", 'String'>
    readonly email: FieldRef<"UserProfile", 'String'>
    readonly username: FieldRef<"UserProfile", 'String'>
    readonly accountType: FieldRef<"UserProfile", 'String'>
    readonly platform: FieldRef<"UserProfile", 'String'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
  }


  /**
   * Model InstagramMedia
   */

  export type AggregateInstagramMedia = {
    _count: InstagramMediaCountAggregateOutputType | null
    _avg: InstagramMediaAvgAggregateOutputType | null
    _sum: InstagramMediaSumAggregateOutputType | null
    _min: InstagramMediaMinAggregateOutputType | null
    _max: InstagramMediaMaxAggregateOutputType | null
  }

  export type InstagramMediaAvgAggregateOutputType = {
    id: number | null
  }

  export type InstagramMediaSumAggregateOutputType = {
    id: number | null
  }

  export type InstagramMediaMinAggregateOutputType = {
    id: number | null
    instagramUserId: string | null
    mediaId: string | null
    mediaType: string | null
    mediaUrl: string | null
    thumbnailUrl: string | null
    caption: string | null
    externalLink: string | null
    permalink: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstagramMediaMaxAggregateOutputType = {
    id: number | null
    instagramUserId: string | null
    mediaId: string | null
    mediaType: string | null
    mediaUrl: string | null
    thumbnailUrl: string | null
    caption: string | null
    externalLink: string | null
    permalink: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstagramMediaCountAggregateOutputType = {
    id: number
    instagramUserId: number
    mediaId: number
    mediaType: number
    mediaUrl: number
    thumbnailUrl: number
    caption: number
    externalLink: number
    permalink: number
    timestamp: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InstagramMediaAvgAggregateInputType = {
    id?: true
  }

  export type InstagramMediaSumAggregateInputType = {
    id?: true
  }

  export type InstagramMediaMinAggregateInputType = {
    id?: true
    instagramUserId?: true
    mediaId?: true
    mediaType?: true
    mediaUrl?: true
    thumbnailUrl?: true
    caption?: true
    externalLink?: true
    permalink?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstagramMediaMaxAggregateInputType = {
    id?: true
    instagramUserId?: true
    mediaId?: true
    mediaType?: true
    mediaUrl?: true
    thumbnailUrl?: true
    caption?: true
    externalLink?: true
    permalink?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstagramMediaCountAggregateInputType = {
    id?: true
    instagramUserId?: true
    mediaId?: true
    mediaType?: true
    mediaUrl?: true
    thumbnailUrl?: true
    caption?: true
    externalLink?: true
    permalink?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InstagramMediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstagramMedia to aggregate.
     */
    where?: InstagramMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMedias to fetch.
     */
    orderBy?: InstagramMediaOrderByWithRelationInput | InstagramMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstagramMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstagramMedias
    **/
    _count?: true | InstagramMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstagramMediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstagramMediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstagramMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstagramMediaMaxAggregateInputType
  }

  export type GetInstagramMediaAggregateType<T extends InstagramMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateInstagramMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstagramMedia[P]>
      : GetScalarType<T[P], AggregateInstagramMedia[P]>
  }




  export type InstagramMediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstagramMediaWhereInput
    orderBy?: InstagramMediaOrderByWithAggregationInput | InstagramMediaOrderByWithAggregationInput[]
    by: InstagramMediaScalarFieldEnum[] | InstagramMediaScalarFieldEnum
    having?: InstagramMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstagramMediaCountAggregateInputType | true
    _avg?: InstagramMediaAvgAggregateInputType
    _sum?: InstagramMediaSumAggregateInputType
    _min?: InstagramMediaMinAggregateInputType
    _max?: InstagramMediaMaxAggregateInputType
  }

  export type InstagramMediaGroupByOutputType = {
    id: number
    instagramUserId: string
    mediaId: string
    mediaType: string | null
    mediaUrl: string | null
    thumbnailUrl: string | null
    caption: string | null
    externalLink: string | null
    permalink: string | null
    timestamp: Date | null
    createdAt: Date
    updatedAt: Date
    _count: InstagramMediaCountAggregateOutputType | null
    _avg: InstagramMediaAvgAggregateOutputType | null
    _sum: InstagramMediaSumAggregateOutputType | null
    _min: InstagramMediaMinAggregateOutputType | null
    _max: InstagramMediaMaxAggregateOutputType | null
  }

  type GetInstagramMediaGroupByPayload<T extends InstagramMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstagramMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstagramMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstagramMediaGroupByOutputType[P]>
            : GetScalarType<T[P], InstagramMediaGroupByOutputType[P]>
        }
      >
    >


  export type InstagramMediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instagramUserId?: boolean
    mediaId?: boolean
    mediaType?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    caption?: boolean
    externalLink?: boolean
    permalink?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["instagramMedia"]>

  export type InstagramMediaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    instagramUserId?: boolean
    mediaId?: boolean
    mediaType?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    caption?: boolean
    externalLink?: boolean
    permalink?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["instagramMedia"]>

  export type InstagramMediaSelectScalar = {
    id?: boolean
    instagramUserId?: boolean
    mediaId?: boolean
    mediaType?: boolean
    mediaUrl?: boolean
    thumbnailUrl?: boolean
    caption?: boolean
    externalLink?: boolean
    permalink?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $InstagramMediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InstagramMedia"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      instagramUserId: string
      mediaId: string
      mediaType: string | null
      mediaUrl: string | null
      thumbnailUrl: string | null
      caption: string | null
      externalLink: string | null
      permalink: string | null
      timestamp: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["instagramMedia"]>
    composites: {}
  }

  type InstagramMediaGetPayload<S extends boolean | null | undefined | InstagramMediaDefaultArgs> = $Result.GetResult<Prisma.$InstagramMediaPayload, S>

  type InstagramMediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InstagramMediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstagramMediaCountAggregateInputType | true
    }

  export interface InstagramMediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstagramMedia'], meta: { name: 'InstagramMedia' } }
    /**
     * Find zero or one InstagramMedia that matches the filter.
     * @param {InstagramMediaFindUniqueArgs} args - Arguments to find a InstagramMedia
     * @example
     * // Get one InstagramMedia
     * const instagramMedia = await prisma.instagramMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstagramMediaFindUniqueArgs>(args: SelectSubset<T, InstagramMediaFindUniqueArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InstagramMedia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InstagramMediaFindUniqueOrThrowArgs} args - Arguments to find a InstagramMedia
     * @example
     * // Get one InstagramMedia
     * const instagramMedia = await prisma.instagramMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstagramMediaFindUniqueOrThrowArgs>(args: SelectSubset<T, InstagramMediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InstagramMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaFindFirstArgs} args - Arguments to find a InstagramMedia
     * @example
     * // Get one InstagramMedia
     * const instagramMedia = await prisma.instagramMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstagramMediaFindFirstArgs>(args?: SelectSubset<T, InstagramMediaFindFirstArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InstagramMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaFindFirstOrThrowArgs} args - Arguments to find a InstagramMedia
     * @example
     * // Get one InstagramMedia
     * const instagramMedia = await prisma.instagramMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstagramMediaFindFirstOrThrowArgs>(args?: SelectSubset<T, InstagramMediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InstagramMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstagramMedias
     * const instagramMedias = await prisma.instagramMedia.findMany()
     * 
     * // Get first 10 InstagramMedias
     * const instagramMedias = await prisma.instagramMedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instagramMediaWithIdOnly = await prisma.instagramMedia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstagramMediaFindManyArgs>(args?: SelectSubset<T, InstagramMediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InstagramMedia.
     * @param {InstagramMediaCreateArgs} args - Arguments to create a InstagramMedia.
     * @example
     * // Create one InstagramMedia
     * const InstagramMedia = await prisma.instagramMedia.create({
     *   data: {
     *     // ... data to create a InstagramMedia
     *   }
     * })
     * 
     */
    create<T extends InstagramMediaCreateArgs>(args: SelectSubset<T, InstagramMediaCreateArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InstagramMedias.
     * @param {InstagramMediaCreateManyArgs} args - Arguments to create many InstagramMedias.
     * @example
     * // Create many InstagramMedias
     * const instagramMedia = await prisma.instagramMedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstagramMediaCreateManyArgs>(args?: SelectSubset<T, InstagramMediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InstagramMedias and returns the data saved in the database.
     * @param {InstagramMediaCreateManyAndReturnArgs} args - Arguments to create many InstagramMedias.
     * @example
     * // Create many InstagramMedias
     * const instagramMedia = await prisma.instagramMedia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InstagramMedias and only return the `id`
     * const instagramMediaWithIdOnly = await prisma.instagramMedia.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstagramMediaCreateManyAndReturnArgs>(args?: SelectSubset<T, InstagramMediaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InstagramMedia.
     * @param {InstagramMediaDeleteArgs} args - Arguments to delete one InstagramMedia.
     * @example
     * // Delete one InstagramMedia
     * const InstagramMedia = await prisma.instagramMedia.delete({
     *   where: {
     *     // ... filter to delete one InstagramMedia
     *   }
     * })
     * 
     */
    delete<T extends InstagramMediaDeleteArgs>(args: SelectSubset<T, InstagramMediaDeleteArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InstagramMedia.
     * @param {InstagramMediaUpdateArgs} args - Arguments to update one InstagramMedia.
     * @example
     * // Update one InstagramMedia
     * const instagramMedia = await prisma.instagramMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstagramMediaUpdateArgs>(args: SelectSubset<T, InstagramMediaUpdateArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InstagramMedias.
     * @param {InstagramMediaDeleteManyArgs} args - Arguments to filter InstagramMedias to delete.
     * @example
     * // Delete a few InstagramMedias
     * const { count } = await prisma.instagramMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstagramMediaDeleteManyArgs>(args?: SelectSubset<T, InstagramMediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstagramMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstagramMedias
     * const instagramMedia = await prisma.instagramMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstagramMediaUpdateManyArgs>(args: SelectSubset<T, InstagramMediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InstagramMedia.
     * @param {InstagramMediaUpsertArgs} args - Arguments to update or create a InstagramMedia.
     * @example
     * // Update or create a InstagramMedia
     * const instagramMedia = await prisma.instagramMedia.upsert({
     *   create: {
     *     // ... data to create a InstagramMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstagramMedia we want to update
     *   }
     * })
     */
    upsert<T extends InstagramMediaUpsertArgs>(args: SelectSubset<T, InstagramMediaUpsertArgs<ExtArgs>>): Prisma__InstagramMediaClient<$Result.GetResult<Prisma.$InstagramMediaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InstagramMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaCountArgs} args - Arguments to filter InstagramMedias to count.
     * @example
     * // Count the number of InstagramMedias
     * const count = await prisma.instagramMedia.count({
     *   where: {
     *     // ... the filter for the InstagramMedias we want to count
     *   }
     * })
    **/
    count<T extends InstagramMediaCountArgs>(
      args?: Subset<T, InstagramMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstagramMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstagramMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstagramMediaAggregateArgs>(args: Subset<T, InstagramMediaAggregateArgs>): Prisma.PrismaPromise<GetInstagramMediaAggregateType<T>>

    /**
     * Group by InstagramMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstagramMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstagramMediaGroupByArgs['orderBy'] }
        : { orderBy?: InstagramMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstagramMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstagramMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InstagramMedia model
   */
  readonly fields: InstagramMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstagramMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstagramMediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InstagramMedia model
   */ 
  interface InstagramMediaFieldRefs {
    readonly id: FieldRef<"InstagramMedia", 'Int'>
    readonly instagramUserId: FieldRef<"InstagramMedia", 'String'>
    readonly mediaId: FieldRef<"InstagramMedia", 'String'>
    readonly mediaType: FieldRef<"InstagramMedia", 'String'>
    readonly mediaUrl: FieldRef<"InstagramMedia", 'String'>
    readonly thumbnailUrl: FieldRef<"InstagramMedia", 'String'>
    readonly caption: FieldRef<"InstagramMedia", 'String'>
    readonly externalLink: FieldRef<"InstagramMedia", 'String'>
    readonly permalink: FieldRef<"InstagramMedia", 'String'>
    readonly timestamp: FieldRef<"InstagramMedia", 'DateTime'>
    readonly createdAt: FieldRef<"InstagramMedia", 'DateTime'>
    readonly updatedAt: FieldRef<"InstagramMedia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InstagramMedia findUnique
   */
  export type InstagramMediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMedia to fetch.
     */
    where: InstagramMediaWhereUniqueInput
  }

  /**
   * InstagramMedia findUniqueOrThrow
   */
  export type InstagramMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMedia to fetch.
     */
    where: InstagramMediaWhereUniqueInput
  }

  /**
   * InstagramMedia findFirst
   */
  export type InstagramMediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMedia to fetch.
     */
    where?: InstagramMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMedias to fetch.
     */
    orderBy?: InstagramMediaOrderByWithRelationInput | InstagramMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstagramMedias.
     */
    cursor?: InstagramMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstagramMedias.
     */
    distinct?: InstagramMediaScalarFieldEnum | InstagramMediaScalarFieldEnum[]
  }

  /**
   * InstagramMedia findFirstOrThrow
   */
  export type InstagramMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMedia to fetch.
     */
    where?: InstagramMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMedias to fetch.
     */
    orderBy?: InstagramMediaOrderByWithRelationInput | InstagramMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstagramMedias.
     */
    cursor?: InstagramMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstagramMedias.
     */
    distinct?: InstagramMediaScalarFieldEnum | InstagramMediaScalarFieldEnum[]
  }

  /**
   * InstagramMedia findMany
   */
  export type InstagramMediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMedias to fetch.
     */
    where?: InstagramMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMedias to fetch.
     */
    orderBy?: InstagramMediaOrderByWithRelationInput | InstagramMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstagramMedias.
     */
    cursor?: InstagramMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMedias.
     */
    skip?: number
    distinct?: InstagramMediaScalarFieldEnum | InstagramMediaScalarFieldEnum[]
  }

  /**
   * InstagramMedia create
   */
  export type InstagramMediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * The data needed to create a InstagramMedia.
     */
    data: XOR<InstagramMediaCreateInput, InstagramMediaUncheckedCreateInput>
  }

  /**
   * InstagramMedia createMany
   */
  export type InstagramMediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InstagramMedias.
     */
    data: InstagramMediaCreateManyInput | InstagramMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstagramMedia createManyAndReturn
   */
  export type InstagramMediaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InstagramMedias.
     */
    data: InstagramMediaCreateManyInput | InstagramMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstagramMedia update
   */
  export type InstagramMediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * The data needed to update a InstagramMedia.
     */
    data: XOR<InstagramMediaUpdateInput, InstagramMediaUncheckedUpdateInput>
    /**
     * Choose, which InstagramMedia to update.
     */
    where: InstagramMediaWhereUniqueInput
  }

  /**
   * InstagramMedia updateMany
   */
  export type InstagramMediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InstagramMedias.
     */
    data: XOR<InstagramMediaUpdateManyMutationInput, InstagramMediaUncheckedUpdateManyInput>
    /**
     * Filter which InstagramMedias to update
     */
    where?: InstagramMediaWhereInput
  }

  /**
   * InstagramMedia upsert
   */
  export type InstagramMediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * The filter to search for the InstagramMedia to update in case it exists.
     */
    where: InstagramMediaWhereUniqueInput
    /**
     * In case the InstagramMedia found by the `where` argument doesn't exist, create a new InstagramMedia with this data.
     */
    create: XOR<InstagramMediaCreateInput, InstagramMediaUncheckedCreateInput>
    /**
     * In case the InstagramMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstagramMediaUpdateInput, InstagramMediaUncheckedUpdateInput>
  }

  /**
   * InstagramMedia delete
   */
  export type InstagramMediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
    /**
     * Filter which InstagramMedia to delete.
     */
    where: InstagramMediaWhereUniqueInput
  }

  /**
   * InstagramMedia deleteMany
   */
  export type InstagramMediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstagramMedias to delete
     */
    where?: InstagramMediaWhereInput
  }

  /**
   * InstagramMedia without action
   */
  export type InstagramMediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMedia
     */
    select?: InstagramMediaSelect<ExtArgs> | null
  }


  /**
   * Model InstagramMediaInsights
   */

  export type AggregateInstagramMediaInsights = {
    _count: InstagramMediaInsightsCountAggregateOutputType | null
    _avg: InstagramMediaInsightsAvgAggregateOutputType | null
    _sum: InstagramMediaInsightsSumAggregateOutputType | null
    _min: InstagramMediaInsightsMinAggregateOutputType | null
    _max: InstagramMediaInsightsMaxAggregateOutputType | null
  }

  export type InstagramMediaInsightsAvgAggregateOutputType = {
    id: number | null
    likes: number | null
    comments: number | null
    shares: number | null
    plays: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
  }

  export type InstagramMediaInsightsSumAggregateOutputType = {
    id: number | null
    likes: number | null
    comments: number | null
    shares: number | null
    plays: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
  }

  export type InstagramMediaInsightsMinAggregateOutputType = {
    id: number | null
    mediaId: string | null
    likes: number | null
    comments: number | null
    shares: number | null
    plays: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstagramMediaInsightsMaxAggregateOutputType = {
    id: number | null
    mediaId: string | null
    likes: number | null
    comments: number | null
    shares: number | null
    plays: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InstagramMediaInsightsCountAggregateOutputType = {
    id: number
    mediaId: number
    likes: number
    comments: number
    shares: number
    plays: number
    reach: number
    impressions: number
    engagement: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InstagramMediaInsightsAvgAggregateInputType = {
    id?: true
    likes?: true
    comments?: true
    shares?: true
    plays?: true
    reach?: true
    impressions?: true
    engagement?: true
  }

  export type InstagramMediaInsightsSumAggregateInputType = {
    id?: true
    likes?: true
    comments?: true
    shares?: true
    plays?: true
    reach?: true
    impressions?: true
    engagement?: true
  }

  export type InstagramMediaInsightsMinAggregateInputType = {
    id?: true
    mediaId?: true
    likes?: true
    comments?: true
    shares?: true
    plays?: true
    reach?: true
    impressions?: true
    engagement?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstagramMediaInsightsMaxAggregateInputType = {
    id?: true
    mediaId?: true
    likes?: true
    comments?: true
    shares?: true
    plays?: true
    reach?: true
    impressions?: true
    engagement?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InstagramMediaInsightsCountAggregateInputType = {
    id?: true
    mediaId?: true
    likes?: true
    comments?: true
    shares?: true
    plays?: true
    reach?: true
    impressions?: true
    engagement?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InstagramMediaInsightsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstagramMediaInsights to aggregate.
     */
    where?: InstagramMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMediaInsights to fetch.
     */
    orderBy?: InstagramMediaInsightsOrderByWithRelationInput | InstagramMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstagramMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMediaInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InstagramMediaInsights
    **/
    _count?: true | InstagramMediaInsightsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstagramMediaInsightsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstagramMediaInsightsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstagramMediaInsightsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstagramMediaInsightsMaxAggregateInputType
  }

  export type GetInstagramMediaInsightsAggregateType<T extends InstagramMediaInsightsAggregateArgs> = {
        [P in keyof T & keyof AggregateInstagramMediaInsights]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstagramMediaInsights[P]>
      : GetScalarType<T[P], AggregateInstagramMediaInsights[P]>
  }




  export type InstagramMediaInsightsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstagramMediaInsightsWhereInput
    orderBy?: InstagramMediaInsightsOrderByWithAggregationInput | InstagramMediaInsightsOrderByWithAggregationInput[]
    by: InstagramMediaInsightsScalarFieldEnum[] | InstagramMediaInsightsScalarFieldEnum
    having?: InstagramMediaInsightsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstagramMediaInsightsCountAggregateInputType | true
    _avg?: InstagramMediaInsightsAvgAggregateInputType
    _sum?: InstagramMediaInsightsSumAggregateInputType
    _min?: InstagramMediaInsightsMinAggregateInputType
    _max?: InstagramMediaInsightsMaxAggregateInputType
  }

  export type InstagramMediaInsightsGroupByOutputType = {
    id: number
    mediaId: string
    likes: number
    comments: number
    shares: number
    plays: number
    reach: number
    impressions: number
    engagement: number
    createdAt: Date
    updatedAt: Date
    _count: InstagramMediaInsightsCountAggregateOutputType | null
    _avg: InstagramMediaInsightsAvgAggregateOutputType | null
    _sum: InstagramMediaInsightsSumAggregateOutputType | null
    _min: InstagramMediaInsightsMinAggregateOutputType | null
    _max: InstagramMediaInsightsMaxAggregateOutputType | null
  }

  type GetInstagramMediaInsightsGroupByPayload<T extends InstagramMediaInsightsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstagramMediaInsightsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstagramMediaInsightsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstagramMediaInsightsGroupByOutputType[P]>
            : GetScalarType<T[P], InstagramMediaInsightsGroupByOutputType[P]>
        }
      >
    >


  export type InstagramMediaInsightsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    plays?: boolean
    reach?: boolean
    impressions?: boolean
    engagement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["instagramMediaInsights"]>

  export type InstagramMediaInsightsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    plays?: boolean
    reach?: boolean
    impressions?: boolean
    engagement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["instagramMediaInsights"]>

  export type InstagramMediaInsightsSelectScalar = {
    id?: boolean
    mediaId?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    plays?: boolean
    reach?: boolean
    impressions?: boolean
    engagement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $InstagramMediaInsightsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InstagramMediaInsights"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mediaId: string
      likes: number
      comments: number
      shares: number
      plays: number
      reach: number
      impressions: number
      engagement: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["instagramMediaInsights"]>
    composites: {}
  }

  type InstagramMediaInsightsGetPayload<S extends boolean | null | undefined | InstagramMediaInsightsDefaultArgs> = $Result.GetResult<Prisma.$InstagramMediaInsightsPayload, S>

  type InstagramMediaInsightsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InstagramMediaInsightsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InstagramMediaInsightsCountAggregateInputType | true
    }

  export interface InstagramMediaInsightsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InstagramMediaInsights'], meta: { name: 'InstagramMediaInsights' } }
    /**
     * Find zero or one InstagramMediaInsights that matches the filter.
     * @param {InstagramMediaInsightsFindUniqueArgs} args - Arguments to find a InstagramMediaInsights
     * @example
     * // Get one InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstagramMediaInsightsFindUniqueArgs>(args: SelectSubset<T, InstagramMediaInsightsFindUniqueArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InstagramMediaInsights that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InstagramMediaInsightsFindUniqueOrThrowArgs} args - Arguments to find a InstagramMediaInsights
     * @example
     * // Get one InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstagramMediaInsightsFindUniqueOrThrowArgs>(args: SelectSubset<T, InstagramMediaInsightsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InstagramMediaInsights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsFindFirstArgs} args - Arguments to find a InstagramMediaInsights
     * @example
     * // Get one InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstagramMediaInsightsFindFirstArgs>(args?: SelectSubset<T, InstagramMediaInsightsFindFirstArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InstagramMediaInsights that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsFindFirstOrThrowArgs} args - Arguments to find a InstagramMediaInsights
     * @example
     * // Get one InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstagramMediaInsightsFindFirstOrThrowArgs>(args?: SelectSubset<T, InstagramMediaInsightsFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InstagramMediaInsights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.findMany()
     * 
     * // Get first 10 InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const instagramMediaInsightsWithIdOnly = await prisma.instagramMediaInsights.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InstagramMediaInsightsFindManyArgs>(args?: SelectSubset<T, InstagramMediaInsightsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InstagramMediaInsights.
     * @param {InstagramMediaInsightsCreateArgs} args - Arguments to create a InstagramMediaInsights.
     * @example
     * // Create one InstagramMediaInsights
     * const InstagramMediaInsights = await prisma.instagramMediaInsights.create({
     *   data: {
     *     // ... data to create a InstagramMediaInsights
     *   }
     * })
     * 
     */
    create<T extends InstagramMediaInsightsCreateArgs>(args: SelectSubset<T, InstagramMediaInsightsCreateArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InstagramMediaInsights.
     * @param {InstagramMediaInsightsCreateManyArgs} args - Arguments to create many InstagramMediaInsights.
     * @example
     * // Create many InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstagramMediaInsightsCreateManyArgs>(args?: SelectSubset<T, InstagramMediaInsightsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InstagramMediaInsights and returns the data saved in the database.
     * @param {InstagramMediaInsightsCreateManyAndReturnArgs} args - Arguments to create many InstagramMediaInsights.
     * @example
     * // Create many InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InstagramMediaInsights and only return the `id`
     * const instagramMediaInsightsWithIdOnly = await prisma.instagramMediaInsights.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstagramMediaInsightsCreateManyAndReturnArgs>(args?: SelectSubset<T, InstagramMediaInsightsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InstagramMediaInsights.
     * @param {InstagramMediaInsightsDeleteArgs} args - Arguments to delete one InstagramMediaInsights.
     * @example
     * // Delete one InstagramMediaInsights
     * const InstagramMediaInsights = await prisma.instagramMediaInsights.delete({
     *   where: {
     *     // ... filter to delete one InstagramMediaInsights
     *   }
     * })
     * 
     */
    delete<T extends InstagramMediaInsightsDeleteArgs>(args: SelectSubset<T, InstagramMediaInsightsDeleteArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InstagramMediaInsights.
     * @param {InstagramMediaInsightsUpdateArgs} args - Arguments to update one InstagramMediaInsights.
     * @example
     * // Update one InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstagramMediaInsightsUpdateArgs>(args: SelectSubset<T, InstagramMediaInsightsUpdateArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InstagramMediaInsights.
     * @param {InstagramMediaInsightsDeleteManyArgs} args - Arguments to filter InstagramMediaInsights to delete.
     * @example
     * // Delete a few InstagramMediaInsights
     * const { count } = await prisma.instagramMediaInsights.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstagramMediaInsightsDeleteManyArgs>(args?: SelectSubset<T, InstagramMediaInsightsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InstagramMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstagramMediaInsightsUpdateManyArgs>(args: SelectSubset<T, InstagramMediaInsightsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InstagramMediaInsights.
     * @param {InstagramMediaInsightsUpsertArgs} args - Arguments to update or create a InstagramMediaInsights.
     * @example
     * // Update or create a InstagramMediaInsights
     * const instagramMediaInsights = await prisma.instagramMediaInsights.upsert({
     *   create: {
     *     // ... data to create a InstagramMediaInsights
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InstagramMediaInsights we want to update
     *   }
     * })
     */
    upsert<T extends InstagramMediaInsightsUpsertArgs>(args: SelectSubset<T, InstagramMediaInsightsUpsertArgs<ExtArgs>>): Prisma__InstagramMediaInsightsClient<$Result.GetResult<Prisma.$InstagramMediaInsightsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InstagramMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsCountArgs} args - Arguments to filter InstagramMediaInsights to count.
     * @example
     * // Count the number of InstagramMediaInsights
     * const count = await prisma.instagramMediaInsights.count({
     *   where: {
     *     // ... the filter for the InstagramMediaInsights we want to count
     *   }
     * })
    **/
    count<T extends InstagramMediaInsightsCountArgs>(
      args?: Subset<T, InstagramMediaInsightsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstagramMediaInsightsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InstagramMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstagramMediaInsightsAggregateArgs>(args: Subset<T, InstagramMediaInsightsAggregateArgs>): Prisma.PrismaPromise<GetInstagramMediaInsightsAggregateType<T>>

    /**
     * Group by InstagramMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstagramMediaInsightsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstagramMediaInsightsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstagramMediaInsightsGroupByArgs['orderBy'] }
        : { orderBy?: InstagramMediaInsightsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstagramMediaInsightsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstagramMediaInsightsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InstagramMediaInsights model
   */
  readonly fields: InstagramMediaInsightsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InstagramMediaInsights.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstagramMediaInsightsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InstagramMediaInsights model
   */ 
  interface InstagramMediaInsightsFieldRefs {
    readonly id: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly mediaId: FieldRef<"InstagramMediaInsights", 'String'>
    readonly likes: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly comments: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly shares: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly plays: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly reach: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly impressions: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly engagement: FieldRef<"InstagramMediaInsights", 'Int'>
    readonly createdAt: FieldRef<"InstagramMediaInsights", 'DateTime'>
    readonly updatedAt: FieldRef<"InstagramMediaInsights", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InstagramMediaInsights findUnique
   */
  export type InstagramMediaInsightsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMediaInsights to fetch.
     */
    where: InstagramMediaInsightsWhereUniqueInput
  }

  /**
   * InstagramMediaInsights findUniqueOrThrow
   */
  export type InstagramMediaInsightsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMediaInsights to fetch.
     */
    where: InstagramMediaInsightsWhereUniqueInput
  }

  /**
   * InstagramMediaInsights findFirst
   */
  export type InstagramMediaInsightsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMediaInsights to fetch.
     */
    where?: InstagramMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMediaInsights to fetch.
     */
    orderBy?: InstagramMediaInsightsOrderByWithRelationInput | InstagramMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstagramMediaInsights.
     */
    cursor?: InstagramMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMediaInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstagramMediaInsights.
     */
    distinct?: InstagramMediaInsightsScalarFieldEnum | InstagramMediaInsightsScalarFieldEnum[]
  }

  /**
   * InstagramMediaInsights findFirstOrThrow
   */
  export type InstagramMediaInsightsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMediaInsights to fetch.
     */
    where?: InstagramMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMediaInsights to fetch.
     */
    orderBy?: InstagramMediaInsightsOrderByWithRelationInput | InstagramMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InstagramMediaInsights.
     */
    cursor?: InstagramMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMediaInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InstagramMediaInsights.
     */
    distinct?: InstagramMediaInsightsScalarFieldEnum | InstagramMediaInsightsScalarFieldEnum[]
  }

  /**
   * InstagramMediaInsights findMany
   */
  export type InstagramMediaInsightsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which InstagramMediaInsights to fetch.
     */
    where?: InstagramMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InstagramMediaInsights to fetch.
     */
    orderBy?: InstagramMediaInsightsOrderByWithRelationInput | InstagramMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InstagramMediaInsights.
     */
    cursor?: InstagramMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InstagramMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InstagramMediaInsights.
     */
    skip?: number
    distinct?: InstagramMediaInsightsScalarFieldEnum | InstagramMediaInsightsScalarFieldEnum[]
  }

  /**
   * InstagramMediaInsights create
   */
  export type InstagramMediaInsightsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * The data needed to create a InstagramMediaInsights.
     */
    data: XOR<InstagramMediaInsightsCreateInput, InstagramMediaInsightsUncheckedCreateInput>
  }

  /**
   * InstagramMediaInsights createMany
   */
  export type InstagramMediaInsightsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InstagramMediaInsights.
     */
    data: InstagramMediaInsightsCreateManyInput | InstagramMediaInsightsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstagramMediaInsights createManyAndReturn
   */
  export type InstagramMediaInsightsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InstagramMediaInsights.
     */
    data: InstagramMediaInsightsCreateManyInput | InstagramMediaInsightsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InstagramMediaInsights update
   */
  export type InstagramMediaInsightsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * The data needed to update a InstagramMediaInsights.
     */
    data: XOR<InstagramMediaInsightsUpdateInput, InstagramMediaInsightsUncheckedUpdateInput>
    /**
     * Choose, which InstagramMediaInsights to update.
     */
    where: InstagramMediaInsightsWhereUniqueInput
  }

  /**
   * InstagramMediaInsights updateMany
   */
  export type InstagramMediaInsightsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InstagramMediaInsights.
     */
    data: XOR<InstagramMediaInsightsUpdateManyMutationInput, InstagramMediaInsightsUncheckedUpdateManyInput>
    /**
     * Filter which InstagramMediaInsights to update
     */
    where?: InstagramMediaInsightsWhereInput
  }

  /**
   * InstagramMediaInsights upsert
   */
  export type InstagramMediaInsightsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * The filter to search for the InstagramMediaInsights to update in case it exists.
     */
    where: InstagramMediaInsightsWhereUniqueInput
    /**
     * In case the InstagramMediaInsights found by the `where` argument doesn't exist, create a new InstagramMediaInsights with this data.
     */
    create: XOR<InstagramMediaInsightsCreateInput, InstagramMediaInsightsUncheckedCreateInput>
    /**
     * In case the InstagramMediaInsights was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstagramMediaInsightsUpdateInput, InstagramMediaInsightsUncheckedUpdateInput>
  }

  /**
   * InstagramMediaInsights delete
   */
  export type InstagramMediaInsightsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter which InstagramMediaInsights to delete.
     */
    where: InstagramMediaInsightsWhereUniqueInput
  }

  /**
   * InstagramMediaInsights deleteMany
   */
  export type InstagramMediaInsightsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InstagramMediaInsights to delete
     */
    where?: InstagramMediaInsightsWhereInput
  }

  /**
   * InstagramMediaInsights without action
   */
  export type InstagramMediaInsightsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstagramMediaInsights
     */
    select?: InstagramMediaInsightsSelect<ExtArgs> | null
  }


  /**
   * Model FacebookMedia
   */

  export type AggregateFacebookMedia = {
    _count: FacebookMediaCountAggregateOutputType | null
    _avg: FacebookMediaAvgAggregateOutputType | null
    _sum: FacebookMediaSumAggregateOutputType | null
    _min: FacebookMediaMinAggregateOutputType | null
    _max: FacebookMediaMaxAggregateOutputType | null
  }

  export type FacebookMediaAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookMediaSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookMediaMinAggregateOutputType = {
    id: number | null
    facebookUserId: string | null
    mediaId: string | null
    mediaType: string | null
    mediaUrl: string | null
    caption: string | null
    permalink: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookMediaMaxAggregateOutputType = {
    id: number | null
    facebookUserId: string | null
    mediaId: string | null
    mediaType: string | null
    mediaUrl: string | null
    caption: string | null
    permalink: string | null
    timestamp: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookMediaCountAggregateOutputType = {
    id: number
    facebookUserId: number
    mediaId: number
    mediaType: number
    mediaUrl: number
    caption: number
    permalink: number
    timestamp: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookMediaAvgAggregateInputType = {
    id?: true
  }

  export type FacebookMediaSumAggregateInputType = {
    id?: true
  }

  export type FacebookMediaMinAggregateInputType = {
    id?: true
    facebookUserId?: true
    mediaId?: true
    mediaType?: true
    mediaUrl?: true
    caption?: true
    permalink?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookMediaMaxAggregateInputType = {
    id?: true
    facebookUserId?: true
    mediaId?: true
    mediaType?: true
    mediaUrl?: true
    caption?: true
    permalink?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookMediaCountAggregateInputType = {
    id?: true
    facebookUserId?: true
    mediaId?: true
    mediaType?: true
    mediaUrl?: true
    caption?: true
    permalink?: true
    timestamp?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookMediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacebookMedia to aggregate.
     */
    where?: FacebookMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMedias to fetch.
     */
    orderBy?: FacebookMediaOrderByWithRelationInput | FacebookMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookMedias
    **/
    _count?: true | FacebookMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookMediaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookMediaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookMediaMaxAggregateInputType
  }

  export type GetFacebookMediaAggregateType<T extends FacebookMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookMedia[P]>
      : GetScalarType<T[P], AggregateFacebookMedia[P]>
  }




  export type FacebookMediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacebookMediaWhereInput
    orderBy?: FacebookMediaOrderByWithAggregationInput | FacebookMediaOrderByWithAggregationInput[]
    by: FacebookMediaScalarFieldEnum[] | FacebookMediaScalarFieldEnum
    having?: FacebookMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookMediaCountAggregateInputType | true
    _avg?: FacebookMediaAvgAggregateInputType
    _sum?: FacebookMediaSumAggregateInputType
    _min?: FacebookMediaMinAggregateInputType
    _max?: FacebookMediaMaxAggregateInputType
  }

  export type FacebookMediaGroupByOutputType = {
    id: number
    facebookUserId: string
    mediaId: string
    mediaType: string | null
    mediaUrl: string | null
    caption: string | null
    permalink: string | null
    timestamp: Date | null
    createdAt: Date
    updatedAt: Date
    _count: FacebookMediaCountAggregateOutputType | null
    _avg: FacebookMediaAvgAggregateOutputType | null
    _sum: FacebookMediaSumAggregateOutputType | null
    _min: FacebookMediaMinAggregateOutputType | null
    _max: FacebookMediaMaxAggregateOutputType | null
  }

  type GetFacebookMediaGroupByPayload<T extends FacebookMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacebookMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookMediaGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookMediaGroupByOutputType[P]>
        }
      >
    >


  export type FacebookMediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facebookUserId?: boolean
    mediaId?: boolean
    mediaType?: boolean
    mediaUrl?: boolean
    caption?: boolean
    permalink?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["facebookMedia"]>

  export type FacebookMediaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    facebookUserId?: boolean
    mediaId?: boolean
    mediaType?: boolean
    mediaUrl?: boolean
    caption?: boolean
    permalink?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["facebookMedia"]>

  export type FacebookMediaSelectScalar = {
    id?: boolean
    facebookUserId?: boolean
    mediaId?: boolean
    mediaType?: boolean
    mediaUrl?: boolean
    caption?: boolean
    permalink?: boolean
    timestamp?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $FacebookMediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FacebookMedia"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      facebookUserId: string
      mediaId: string
      mediaType: string | null
      mediaUrl: string | null
      caption: string | null
      permalink: string | null
      timestamp: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["facebookMedia"]>
    composites: {}
  }

  type FacebookMediaGetPayload<S extends boolean | null | undefined | FacebookMediaDefaultArgs> = $Result.GetResult<Prisma.$FacebookMediaPayload, S>

  type FacebookMediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacebookMediaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacebookMediaCountAggregateInputType | true
    }

  export interface FacebookMediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacebookMedia'], meta: { name: 'FacebookMedia' } }
    /**
     * Find zero or one FacebookMedia that matches the filter.
     * @param {FacebookMediaFindUniqueArgs} args - Arguments to find a FacebookMedia
     * @example
     * // Get one FacebookMedia
     * const facebookMedia = await prisma.facebookMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacebookMediaFindUniqueArgs>(args: SelectSubset<T, FacebookMediaFindUniqueArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FacebookMedia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FacebookMediaFindUniqueOrThrowArgs} args - Arguments to find a FacebookMedia
     * @example
     * // Get one FacebookMedia
     * const facebookMedia = await prisma.facebookMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacebookMediaFindUniqueOrThrowArgs>(args: SelectSubset<T, FacebookMediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FacebookMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaFindFirstArgs} args - Arguments to find a FacebookMedia
     * @example
     * // Get one FacebookMedia
     * const facebookMedia = await prisma.facebookMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacebookMediaFindFirstArgs>(args?: SelectSubset<T, FacebookMediaFindFirstArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FacebookMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaFindFirstOrThrowArgs} args - Arguments to find a FacebookMedia
     * @example
     * // Get one FacebookMedia
     * const facebookMedia = await prisma.facebookMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacebookMediaFindFirstOrThrowArgs>(args?: SelectSubset<T, FacebookMediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FacebookMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookMedias
     * const facebookMedias = await prisma.facebookMedia.findMany()
     * 
     * // Get first 10 FacebookMedias
     * const facebookMedias = await prisma.facebookMedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookMediaWithIdOnly = await prisma.facebookMedia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacebookMediaFindManyArgs>(args?: SelectSubset<T, FacebookMediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FacebookMedia.
     * @param {FacebookMediaCreateArgs} args - Arguments to create a FacebookMedia.
     * @example
     * // Create one FacebookMedia
     * const FacebookMedia = await prisma.facebookMedia.create({
     *   data: {
     *     // ... data to create a FacebookMedia
     *   }
     * })
     * 
     */
    create<T extends FacebookMediaCreateArgs>(args: SelectSubset<T, FacebookMediaCreateArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FacebookMedias.
     * @param {FacebookMediaCreateManyArgs} args - Arguments to create many FacebookMedias.
     * @example
     * // Create many FacebookMedias
     * const facebookMedia = await prisma.facebookMedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacebookMediaCreateManyArgs>(args?: SelectSubset<T, FacebookMediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FacebookMedias and returns the data saved in the database.
     * @param {FacebookMediaCreateManyAndReturnArgs} args - Arguments to create many FacebookMedias.
     * @example
     * // Create many FacebookMedias
     * const facebookMedia = await prisma.facebookMedia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FacebookMedias and only return the `id`
     * const facebookMediaWithIdOnly = await prisma.facebookMedia.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacebookMediaCreateManyAndReturnArgs>(args?: SelectSubset<T, FacebookMediaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FacebookMedia.
     * @param {FacebookMediaDeleteArgs} args - Arguments to delete one FacebookMedia.
     * @example
     * // Delete one FacebookMedia
     * const FacebookMedia = await prisma.facebookMedia.delete({
     *   where: {
     *     // ... filter to delete one FacebookMedia
     *   }
     * })
     * 
     */
    delete<T extends FacebookMediaDeleteArgs>(args: SelectSubset<T, FacebookMediaDeleteArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FacebookMedia.
     * @param {FacebookMediaUpdateArgs} args - Arguments to update one FacebookMedia.
     * @example
     * // Update one FacebookMedia
     * const facebookMedia = await prisma.facebookMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacebookMediaUpdateArgs>(args: SelectSubset<T, FacebookMediaUpdateArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FacebookMedias.
     * @param {FacebookMediaDeleteManyArgs} args - Arguments to filter FacebookMedias to delete.
     * @example
     * // Delete a few FacebookMedias
     * const { count } = await prisma.facebookMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacebookMediaDeleteManyArgs>(args?: SelectSubset<T, FacebookMediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookMedias
     * const facebookMedia = await prisma.facebookMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacebookMediaUpdateManyArgs>(args: SelectSubset<T, FacebookMediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookMedia.
     * @param {FacebookMediaUpsertArgs} args - Arguments to update or create a FacebookMedia.
     * @example
     * // Update or create a FacebookMedia
     * const facebookMedia = await prisma.facebookMedia.upsert({
     *   create: {
     *     // ... data to create a FacebookMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookMedia we want to update
     *   }
     * })
     */
    upsert<T extends FacebookMediaUpsertArgs>(args: SelectSubset<T, FacebookMediaUpsertArgs<ExtArgs>>): Prisma__FacebookMediaClient<$Result.GetResult<Prisma.$FacebookMediaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FacebookMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaCountArgs} args - Arguments to filter FacebookMedias to count.
     * @example
     * // Count the number of FacebookMedias
     * const count = await prisma.facebookMedia.count({
     *   where: {
     *     // ... the filter for the FacebookMedias we want to count
     *   }
     * })
    **/
    count<T extends FacebookMediaCountArgs>(
      args?: Subset<T, FacebookMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookMediaAggregateArgs>(args: Subset<T, FacebookMediaAggregateArgs>): Prisma.PrismaPromise<GetFacebookMediaAggregateType<T>>

    /**
     * Group by FacebookMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookMediaGroupByArgs['orderBy'] }
        : { orderBy?: FacebookMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacebookMedia model
   */
  readonly fields: FacebookMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacebookMediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FacebookMedia model
   */ 
  interface FacebookMediaFieldRefs {
    readonly id: FieldRef<"FacebookMedia", 'Int'>
    readonly facebookUserId: FieldRef<"FacebookMedia", 'String'>
    readonly mediaId: FieldRef<"FacebookMedia", 'String'>
    readonly mediaType: FieldRef<"FacebookMedia", 'String'>
    readonly mediaUrl: FieldRef<"FacebookMedia", 'String'>
    readonly caption: FieldRef<"FacebookMedia", 'String'>
    readonly permalink: FieldRef<"FacebookMedia", 'String'>
    readonly timestamp: FieldRef<"FacebookMedia", 'DateTime'>
    readonly createdAt: FieldRef<"FacebookMedia", 'DateTime'>
    readonly updatedAt: FieldRef<"FacebookMedia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FacebookMedia findUnique
   */
  export type FacebookMediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMedia to fetch.
     */
    where: FacebookMediaWhereUniqueInput
  }

  /**
   * FacebookMedia findUniqueOrThrow
   */
  export type FacebookMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMedia to fetch.
     */
    where: FacebookMediaWhereUniqueInput
  }

  /**
   * FacebookMedia findFirst
   */
  export type FacebookMediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMedia to fetch.
     */
    where?: FacebookMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMedias to fetch.
     */
    orderBy?: FacebookMediaOrderByWithRelationInput | FacebookMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookMedias.
     */
    cursor?: FacebookMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookMedias.
     */
    distinct?: FacebookMediaScalarFieldEnum | FacebookMediaScalarFieldEnum[]
  }

  /**
   * FacebookMedia findFirstOrThrow
   */
  export type FacebookMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMedia to fetch.
     */
    where?: FacebookMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMedias to fetch.
     */
    orderBy?: FacebookMediaOrderByWithRelationInput | FacebookMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookMedias.
     */
    cursor?: FacebookMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookMedias.
     */
    distinct?: FacebookMediaScalarFieldEnum | FacebookMediaScalarFieldEnum[]
  }

  /**
   * FacebookMedia findMany
   */
  export type FacebookMediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMedias to fetch.
     */
    where?: FacebookMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMedias to fetch.
     */
    orderBy?: FacebookMediaOrderByWithRelationInput | FacebookMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookMedias.
     */
    cursor?: FacebookMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMedias.
     */
    skip?: number
    distinct?: FacebookMediaScalarFieldEnum | FacebookMediaScalarFieldEnum[]
  }

  /**
   * FacebookMedia create
   */
  export type FacebookMediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * The data needed to create a FacebookMedia.
     */
    data: XOR<FacebookMediaCreateInput, FacebookMediaUncheckedCreateInput>
  }

  /**
   * FacebookMedia createMany
   */
  export type FacebookMediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FacebookMedias.
     */
    data: FacebookMediaCreateManyInput | FacebookMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacebookMedia createManyAndReturn
   */
  export type FacebookMediaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FacebookMedias.
     */
    data: FacebookMediaCreateManyInput | FacebookMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacebookMedia update
   */
  export type FacebookMediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * The data needed to update a FacebookMedia.
     */
    data: XOR<FacebookMediaUpdateInput, FacebookMediaUncheckedUpdateInput>
    /**
     * Choose, which FacebookMedia to update.
     */
    where: FacebookMediaWhereUniqueInput
  }

  /**
   * FacebookMedia updateMany
   */
  export type FacebookMediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacebookMedias.
     */
    data: XOR<FacebookMediaUpdateManyMutationInput, FacebookMediaUncheckedUpdateManyInput>
    /**
     * Filter which FacebookMedias to update
     */
    where?: FacebookMediaWhereInput
  }

  /**
   * FacebookMedia upsert
   */
  export type FacebookMediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * The filter to search for the FacebookMedia to update in case it exists.
     */
    where: FacebookMediaWhereUniqueInput
    /**
     * In case the FacebookMedia found by the `where` argument doesn't exist, create a new FacebookMedia with this data.
     */
    create: XOR<FacebookMediaCreateInput, FacebookMediaUncheckedCreateInput>
    /**
     * In case the FacebookMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookMediaUpdateInput, FacebookMediaUncheckedUpdateInput>
  }

  /**
   * FacebookMedia delete
   */
  export type FacebookMediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
    /**
     * Filter which FacebookMedia to delete.
     */
    where: FacebookMediaWhereUniqueInput
  }

  /**
   * FacebookMedia deleteMany
   */
  export type FacebookMediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacebookMedias to delete
     */
    where?: FacebookMediaWhereInput
  }

  /**
   * FacebookMedia without action
   */
  export type FacebookMediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMedia
     */
    select?: FacebookMediaSelect<ExtArgs> | null
  }


  /**
   * Model FacebookMediaInsights
   */

  export type AggregateFacebookMediaInsights = {
    _count: FacebookMediaInsightsCountAggregateOutputType | null
    _avg: FacebookMediaInsightsAvgAggregateOutputType | null
    _sum: FacebookMediaInsightsSumAggregateOutputType | null
    _min: FacebookMediaInsightsMinAggregateOutputType | null
    _max: FacebookMediaInsightsMaxAggregateOutputType | null
  }

  export type FacebookMediaInsightsAvgAggregateOutputType = {
    id: number | null
    likes: number | null
    comments: number | null
    shares: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
  }

  export type FacebookMediaInsightsSumAggregateOutputType = {
    id: number | null
    likes: number | null
    comments: number | null
    shares: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
  }

  export type FacebookMediaInsightsMinAggregateOutputType = {
    id: number | null
    mediaId: string | null
    likes: number | null
    comments: number | null
    shares: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookMediaInsightsMaxAggregateOutputType = {
    id: number | null
    mediaId: string | null
    likes: number | null
    comments: number | null
    shares: number | null
    reach: number | null
    impressions: number | null
    engagement: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookMediaInsightsCountAggregateOutputType = {
    id: number
    mediaId: number
    likes: number
    comments: number
    shares: number
    reach: number
    impressions: number
    engagement: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookMediaInsightsAvgAggregateInputType = {
    id?: true
    likes?: true
    comments?: true
    shares?: true
    reach?: true
    impressions?: true
    engagement?: true
  }

  export type FacebookMediaInsightsSumAggregateInputType = {
    id?: true
    likes?: true
    comments?: true
    shares?: true
    reach?: true
    impressions?: true
    engagement?: true
  }

  export type FacebookMediaInsightsMinAggregateInputType = {
    id?: true
    mediaId?: true
    likes?: true
    comments?: true
    shares?: true
    reach?: true
    impressions?: true
    engagement?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookMediaInsightsMaxAggregateInputType = {
    id?: true
    mediaId?: true
    likes?: true
    comments?: true
    shares?: true
    reach?: true
    impressions?: true
    engagement?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookMediaInsightsCountAggregateInputType = {
    id?: true
    mediaId?: true
    likes?: true
    comments?: true
    shares?: true
    reach?: true
    impressions?: true
    engagement?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookMediaInsightsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacebookMediaInsights to aggregate.
     */
    where?: FacebookMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMediaInsights to fetch.
     */
    orderBy?: FacebookMediaInsightsOrderByWithRelationInput | FacebookMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMediaInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookMediaInsights
    **/
    _count?: true | FacebookMediaInsightsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookMediaInsightsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookMediaInsightsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookMediaInsightsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookMediaInsightsMaxAggregateInputType
  }

  export type GetFacebookMediaInsightsAggregateType<T extends FacebookMediaInsightsAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookMediaInsights]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookMediaInsights[P]>
      : GetScalarType<T[P], AggregateFacebookMediaInsights[P]>
  }




  export type FacebookMediaInsightsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FacebookMediaInsightsWhereInput
    orderBy?: FacebookMediaInsightsOrderByWithAggregationInput | FacebookMediaInsightsOrderByWithAggregationInput[]
    by: FacebookMediaInsightsScalarFieldEnum[] | FacebookMediaInsightsScalarFieldEnum
    having?: FacebookMediaInsightsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookMediaInsightsCountAggregateInputType | true
    _avg?: FacebookMediaInsightsAvgAggregateInputType
    _sum?: FacebookMediaInsightsSumAggregateInputType
    _min?: FacebookMediaInsightsMinAggregateInputType
    _max?: FacebookMediaInsightsMaxAggregateInputType
  }

  export type FacebookMediaInsightsGroupByOutputType = {
    id: number
    mediaId: string
    likes: number
    comments: number
    shares: number
    reach: number
    impressions: number
    engagement: number
    createdAt: Date
    updatedAt: Date
    _count: FacebookMediaInsightsCountAggregateOutputType | null
    _avg: FacebookMediaInsightsAvgAggregateOutputType | null
    _sum: FacebookMediaInsightsSumAggregateOutputType | null
    _min: FacebookMediaInsightsMinAggregateOutputType | null
    _max: FacebookMediaInsightsMaxAggregateOutputType | null
  }

  type GetFacebookMediaInsightsGroupByPayload<T extends FacebookMediaInsightsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FacebookMediaInsightsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookMediaInsightsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookMediaInsightsGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookMediaInsightsGroupByOutputType[P]>
        }
      >
    >


  export type FacebookMediaInsightsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    reach?: boolean
    impressions?: boolean
    engagement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["facebookMediaInsights"]>

  export type FacebookMediaInsightsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mediaId?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    reach?: boolean
    impressions?: boolean
    engagement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["facebookMediaInsights"]>

  export type FacebookMediaInsightsSelectScalar = {
    id?: boolean
    mediaId?: boolean
    likes?: boolean
    comments?: boolean
    shares?: boolean
    reach?: boolean
    impressions?: boolean
    engagement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $FacebookMediaInsightsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FacebookMediaInsights"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mediaId: string
      likes: number
      comments: number
      shares: number
      reach: number
      impressions: number
      engagement: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["facebookMediaInsights"]>
    composites: {}
  }

  type FacebookMediaInsightsGetPayload<S extends boolean | null | undefined | FacebookMediaInsightsDefaultArgs> = $Result.GetResult<Prisma.$FacebookMediaInsightsPayload, S>

  type FacebookMediaInsightsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FacebookMediaInsightsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FacebookMediaInsightsCountAggregateInputType | true
    }

  export interface FacebookMediaInsightsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FacebookMediaInsights'], meta: { name: 'FacebookMediaInsights' } }
    /**
     * Find zero or one FacebookMediaInsights that matches the filter.
     * @param {FacebookMediaInsightsFindUniqueArgs} args - Arguments to find a FacebookMediaInsights
     * @example
     * // Get one FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FacebookMediaInsightsFindUniqueArgs>(args: SelectSubset<T, FacebookMediaInsightsFindUniqueArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FacebookMediaInsights that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FacebookMediaInsightsFindUniqueOrThrowArgs} args - Arguments to find a FacebookMediaInsights
     * @example
     * // Get one FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FacebookMediaInsightsFindUniqueOrThrowArgs>(args: SelectSubset<T, FacebookMediaInsightsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FacebookMediaInsights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsFindFirstArgs} args - Arguments to find a FacebookMediaInsights
     * @example
     * // Get one FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FacebookMediaInsightsFindFirstArgs>(args?: SelectSubset<T, FacebookMediaInsightsFindFirstArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FacebookMediaInsights that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsFindFirstOrThrowArgs} args - Arguments to find a FacebookMediaInsights
     * @example
     * // Get one FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FacebookMediaInsightsFindFirstOrThrowArgs>(args?: SelectSubset<T, FacebookMediaInsightsFindFirstOrThrowArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FacebookMediaInsights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.findMany()
     * 
     * // Get first 10 FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookMediaInsightsWithIdOnly = await prisma.facebookMediaInsights.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FacebookMediaInsightsFindManyArgs>(args?: SelectSubset<T, FacebookMediaInsightsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FacebookMediaInsights.
     * @param {FacebookMediaInsightsCreateArgs} args - Arguments to create a FacebookMediaInsights.
     * @example
     * // Create one FacebookMediaInsights
     * const FacebookMediaInsights = await prisma.facebookMediaInsights.create({
     *   data: {
     *     // ... data to create a FacebookMediaInsights
     *   }
     * })
     * 
     */
    create<T extends FacebookMediaInsightsCreateArgs>(args: SelectSubset<T, FacebookMediaInsightsCreateArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FacebookMediaInsights.
     * @param {FacebookMediaInsightsCreateManyArgs} args - Arguments to create many FacebookMediaInsights.
     * @example
     * // Create many FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FacebookMediaInsightsCreateManyArgs>(args?: SelectSubset<T, FacebookMediaInsightsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FacebookMediaInsights and returns the data saved in the database.
     * @param {FacebookMediaInsightsCreateManyAndReturnArgs} args - Arguments to create many FacebookMediaInsights.
     * @example
     * // Create many FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FacebookMediaInsights and only return the `id`
     * const facebookMediaInsightsWithIdOnly = await prisma.facebookMediaInsights.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FacebookMediaInsightsCreateManyAndReturnArgs>(args?: SelectSubset<T, FacebookMediaInsightsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FacebookMediaInsights.
     * @param {FacebookMediaInsightsDeleteArgs} args - Arguments to delete one FacebookMediaInsights.
     * @example
     * // Delete one FacebookMediaInsights
     * const FacebookMediaInsights = await prisma.facebookMediaInsights.delete({
     *   where: {
     *     // ... filter to delete one FacebookMediaInsights
     *   }
     * })
     * 
     */
    delete<T extends FacebookMediaInsightsDeleteArgs>(args: SelectSubset<T, FacebookMediaInsightsDeleteArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FacebookMediaInsights.
     * @param {FacebookMediaInsightsUpdateArgs} args - Arguments to update one FacebookMediaInsights.
     * @example
     * // Update one FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FacebookMediaInsightsUpdateArgs>(args: SelectSubset<T, FacebookMediaInsightsUpdateArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FacebookMediaInsights.
     * @param {FacebookMediaInsightsDeleteManyArgs} args - Arguments to filter FacebookMediaInsights to delete.
     * @example
     * // Delete a few FacebookMediaInsights
     * const { count } = await prisma.facebookMediaInsights.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FacebookMediaInsightsDeleteManyArgs>(args?: SelectSubset<T, FacebookMediaInsightsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FacebookMediaInsightsUpdateManyArgs>(args: SelectSubset<T, FacebookMediaInsightsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookMediaInsights.
     * @param {FacebookMediaInsightsUpsertArgs} args - Arguments to update or create a FacebookMediaInsights.
     * @example
     * // Update or create a FacebookMediaInsights
     * const facebookMediaInsights = await prisma.facebookMediaInsights.upsert({
     *   create: {
     *     // ... data to create a FacebookMediaInsights
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookMediaInsights we want to update
     *   }
     * })
     */
    upsert<T extends FacebookMediaInsightsUpsertArgs>(args: SelectSubset<T, FacebookMediaInsightsUpsertArgs<ExtArgs>>): Prisma__FacebookMediaInsightsClient<$Result.GetResult<Prisma.$FacebookMediaInsightsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FacebookMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsCountArgs} args - Arguments to filter FacebookMediaInsights to count.
     * @example
     * // Count the number of FacebookMediaInsights
     * const count = await prisma.facebookMediaInsights.count({
     *   where: {
     *     // ... the filter for the FacebookMediaInsights we want to count
     *   }
     * })
    **/
    count<T extends FacebookMediaInsightsCountArgs>(
      args?: Subset<T, FacebookMediaInsightsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookMediaInsightsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookMediaInsightsAggregateArgs>(args: Subset<T, FacebookMediaInsightsAggregateArgs>): Prisma.PrismaPromise<GetFacebookMediaInsightsAggregateType<T>>

    /**
     * Group by FacebookMediaInsights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMediaInsightsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookMediaInsightsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookMediaInsightsGroupByArgs['orderBy'] }
        : { orderBy?: FacebookMediaInsightsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookMediaInsightsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookMediaInsightsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FacebookMediaInsights model
   */
  readonly fields: FacebookMediaInsightsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookMediaInsights.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FacebookMediaInsightsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FacebookMediaInsights model
   */ 
  interface FacebookMediaInsightsFieldRefs {
    readonly id: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly mediaId: FieldRef<"FacebookMediaInsights", 'String'>
    readonly likes: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly comments: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly shares: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly reach: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly impressions: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly engagement: FieldRef<"FacebookMediaInsights", 'Int'>
    readonly createdAt: FieldRef<"FacebookMediaInsights", 'DateTime'>
    readonly updatedAt: FieldRef<"FacebookMediaInsights", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FacebookMediaInsights findUnique
   */
  export type FacebookMediaInsightsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMediaInsights to fetch.
     */
    where: FacebookMediaInsightsWhereUniqueInput
  }

  /**
   * FacebookMediaInsights findUniqueOrThrow
   */
  export type FacebookMediaInsightsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMediaInsights to fetch.
     */
    where: FacebookMediaInsightsWhereUniqueInput
  }

  /**
   * FacebookMediaInsights findFirst
   */
  export type FacebookMediaInsightsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMediaInsights to fetch.
     */
    where?: FacebookMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMediaInsights to fetch.
     */
    orderBy?: FacebookMediaInsightsOrderByWithRelationInput | FacebookMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookMediaInsights.
     */
    cursor?: FacebookMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMediaInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookMediaInsights.
     */
    distinct?: FacebookMediaInsightsScalarFieldEnum | FacebookMediaInsightsScalarFieldEnum[]
  }

  /**
   * FacebookMediaInsights findFirstOrThrow
   */
  export type FacebookMediaInsightsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMediaInsights to fetch.
     */
    where?: FacebookMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMediaInsights to fetch.
     */
    orderBy?: FacebookMediaInsightsOrderByWithRelationInput | FacebookMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookMediaInsights.
     */
    cursor?: FacebookMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMediaInsights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookMediaInsights.
     */
    distinct?: FacebookMediaInsightsScalarFieldEnum | FacebookMediaInsightsScalarFieldEnum[]
  }

  /**
   * FacebookMediaInsights findMany
   */
  export type FacebookMediaInsightsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter, which FacebookMediaInsights to fetch.
     */
    where?: FacebookMediaInsightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMediaInsights to fetch.
     */
    orderBy?: FacebookMediaInsightsOrderByWithRelationInput | FacebookMediaInsightsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookMediaInsights.
     */
    cursor?: FacebookMediaInsightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMediaInsights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMediaInsights.
     */
    skip?: number
    distinct?: FacebookMediaInsightsScalarFieldEnum | FacebookMediaInsightsScalarFieldEnum[]
  }

  /**
   * FacebookMediaInsights create
   */
  export type FacebookMediaInsightsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * The data needed to create a FacebookMediaInsights.
     */
    data: XOR<FacebookMediaInsightsCreateInput, FacebookMediaInsightsUncheckedCreateInput>
  }

  /**
   * FacebookMediaInsights createMany
   */
  export type FacebookMediaInsightsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FacebookMediaInsights.
     */
    data: FacebookMediaInsightsCreateManyInput | FacebookMediaInsightsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacebookMediaInsights createManyAndReturn
   */
  export type FacebookMediaInsightsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FacebookMediaInsights.
     */
    data: FacebookMediaInsightsCreateManyInput | FacebookMediaInsightsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FacebookMediaInsights update
   */
  export type FacebookMediaInsightsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * The data needed to update a FacebookMediaInsights.
     */
    data: XOR<FacebookMediaInsightsUpdateInput, FacebookMediaInsightsUncheckedUpdateInput>
    /**
     * Choose, which FacebookMediaInsights to update.
     */
    where: FacebookMediaInsightsWhereUniqueInput
  }

  /**
   * FacebookMediaInsights updateMany
   */
  export type FacebookMediaInsightsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FacebookMediaInsights.
     */
    data: XOR<FacebookMediaInsightsUpdateManyMutationInput, FacebookMediaInsightsUncheckedUpdateManyInput>
    /**
     * Filter which FacebookMediaInsights to update
     */
    where?: FacebookMediaInsightsWhereInput
  }

  /**
   * FacebookMediaInsights upsert
   */
  export type FacebookMediaInsightsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * The filter to search for the FacebookMediaInsights to update in case it exists.
     */
    where: FacebookMediaInsightsWhereUniqueInput
    /**
     * In case the FacebookMediaInsights found by the `where` argument doesn't exist, create a new FacebookMediaInsights with this data.
     */
    create: XOR<FacebookMediaInsightsCreateInput, FacebookMediaInsightsUncheckedCreateInput>
    /**
     * In case the FacebookMediaInsights was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookMediaInsightsUpdateInput, FacebookMediaInsightsUncheckedUpdateInput>
  }

  /**
   * FacebookMediaInsights delete
   */
  export type FacebookMediaInsightsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
    /**
     * Filter which FacebookMediaInsights to delete.
     */
    where: FacebookMediaInsightsWhereUniqueInput
  }

  /**
   * FacebookMediaInsights deleteMany
   */
  export type FacebookMediaInsightsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FacebookMediaInsights to delete
     */
    where?: FacebookMediaInsightsWhereInput
  }

  /**
   * FacebookMediaInsights without action
   */
  export type FacebookMediaInsightsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FacebookMediaInsights
     */
    select?: FacebookMediaInsightsSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    platformId: 'platformId',
    name: 'name',
    email: 'email',
    username: 'username',
    accountType: 'accountType',
    platform: 'platform',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const InstagramMediaScalarFieldEnum: {
    id: 'id',
    instagramUserId: 'instagramUserId',
    mediaId: 'mediaId',
    mediaType: 'mediaType',
    mediaUrl: 'mediaUrl',
    thumbnailUrl: 'thumbnailUrl',
    caption: 'caption',
    externalLink: 'externalLink',
    permalink: 'permalink',
    timestamp: 'timestamp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InstagramMediaScalarFieldEnum = (typeof InstagramMediaScalarFieldEnum)[keyof typeof InstagramMediaScalarFieldEnum]


  export const InstagramMediaInsightsScalarFieldEnum: {
    id: 'id',
    mediaId: 'mediaId',
    likes: 'likes',
    comments: 'comments',
    shares: 'shares',
    plays: 'plays',
    reach: 'reach',
    impressions: 'impressions',
    engagement: 'engagement',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InstagramMediaInsightsScalarFieldEnum = (typeof InstagramMediaInsightsScalarFieldEnum)[keyof typeof InstagramMediaInsightsScalarFieldEnum]


  export const FacebookMediaScalarFieldEnum: {
    id: 'id',
    facebookUserId: 'facebookUserId',
    mediaId: 'mediaId',
    mediaType: 'mediaType',
    mediaUrl: 'mediaUrl',
    caption: 'caption',
    permalink: 'permalink',
    timestamp: 'timestamp',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookMediaScalarFieldEnum = (typeof FacebookMediaScalarFieldEnum)[keyof typeof FacebookMediaScalarFieldEnum]


  export const FacebookMediaInsightsScalarFieldEnum: {
    id: 'id',
    mediaId: 'mediaId',
    likes: 'likes',
    comments: 'comments',
    shares: 'shares',
    reach: 'reach',
    impressions: 'impressions',
    engagement: 'engagement',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookMediaInsightsScalarFieldEnum = (typeof FacebookMediaInsightsScalarFieldEnum)[keyof typeof FacebookMediaInsightsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: IntFilter<"UserProfile"> | number
    platformId?: StringFilter<"UserProfile"> | string
    name?: StringNullableFilter<"UserProfile"> | string | null
    email?: StringNullableFilter<"UserProfile"> | string | null
    username?: StringNullableFilter<"UserProfile"> | string | null
    accountType?: StringNullableFilter<"UserProfile"> | string | null
    platform?: StringFilter<"UserProfile"> | string
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    platformId?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    accountType?: SortOrderInput | SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    platformId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    name?: StringNullableFilter<"UserProfile"> | string | null
    email?: StringNullableFilter<"UserProfile"> | string | null
    username?: StringNullableFilter<"UserProfile"> | string | null
    accountType?: StringNullableFilter<"UserProfile"> | string | null
    platform?: StringFilter<"UserProfile"> | string
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
  }, "id" | "platformId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    platformId?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    username?: SortOrderInput | SortOrder
    accountType?: SortOrderInput | SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserProfile"> | number
    platformId?: StringWithAggregatesFilter<"UserProfile"> | string
    name?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    email?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    username?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    accountType?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    platform?: StringWithAggregatesFilter<"UserProfile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type InstagramMediaWhereInput = {
    AND?: InstagramMediaWhereInput | InstagramMediaWhereInput[]
    OR?: InstagramMediaWhereInput[]
    NOT?: InstagramMediaWhereInput | InstagramMediaWhereInput[]
    id?: IntFilter<"InstagramMedia"> | number
    instagramUserId?: StringFilter<"InstagramMedia"> | string
    mediaId?: StringFilter<"InstagramMedia"> | string
    mediaType?: StringNullableFilter<"InstagramMedia"> | string | null
    mediaUrl?: StringNullableFilter<"InstagramMedia"> | string | null
    thumbnailUrl?: StringNullableFilter<"InstagramMedia"> | string | null
    caption?: StringNullableFilter<"InstagramMedia"> | string | null
    externalLink?: StringNullableFilter<"InstagramMedia"> | string | null
    permalink?: StringNullableFilter<"InstagramMedia"> | string | null
    timestamp?: DateTimeNullableFilter<"InstagramMedia"> | Date | string | null
    createdAt?: DateTimeFilter<"InstagramMedia"> | Date | string
    updatedAt?: DateTimeFilter<"InstagramMedia"> | Date | string
  }

  export type InstagramMediaOrderByWithRelationInput = {
    id?: SortOrder
    instagramUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrderInput | SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    externalLink?: SortOrderInput | SortOrder
    permalink?: SortOrderInput | SortOrder
    timestamp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mediaId?: string
    AND?: InstagramMediaWhereInput | InstagramMediaWhereInput[]
    OR?: InstagramMediaWhereInput[]
    NOT?: InstagramMediaWhereInput | InstagramMediaWhereInput[]
    instagramUserId?: StringFilter<"InstagramMedia"> | string
    mediaType?: StringNullableFilter<"InstagramMedia"> | string | null
    mediaUrl?: StringNullableFilter<"InstagramMedia"> | string | null
    thumbnailUrl?: StringNullableFilter<"InstagramMedia"> | string | null
    caption?: StringNullableFilter<"InstagramMedia"> | string | null
    externalLink?: StringNullableFilter<"InstagramMedia"> | string | null
    permalink?: StringNullableFilter<"InstagramMedia"> | string | null
    timestamp?: DateTimeNullableFilter<"InstagramMedia"> | Date | string | null
    createdAt?: DateTimeFilter<"InstagramMedia"> | Date | string
    updatedAt?: DateTimeFilter<"InstagramMedia"> | Date | string
  }, "id" | "mediaId">

  export type InstagramMediaOrderByWithAggregationInput = {
    id?: SortOrder
    instagramUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrderInput | SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    thumbnailUrl?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    externalLink?: SortOrderInput | SortOrder
    permalink?: SortOrderInput | SortOrder
    timestamp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InstagramMediaCountOrderByAggregateInput
    _avg?: InstagramMediaAvgOrderByAggregateInput
    _max?: InstagramMediaMaxOrderByAggregateInput
    _min?: InstagramMediaMinOrderByAggregateInput
    _sum?: InstagramMediaSumOrderByAggregateInput
  }

  export type InstagramMediaScalarWhereWithAggregatesInput = {
    AND?: InstagramMediaScalarWhereWithAggregatesInput | InstagramMediaScalarWhereWithAggregatesInput[]
    OR?: InstagramMediaScalarWhereWithAggregatesInput[]
    NOT?: InstagramMediaScalarWhereWithAggregatesInput | InstagramMediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InstagramMedia"> | number
    instagramUserId?: StringWithAggregatesFilter<"InstagramMedia"> | string
    mediaId?: StringWithAggregatesFilter<"InstagramMedia"> | string
    mediaType?: StringNullableWithAggregatesFilter<"InstagramMedia"> | string | null
    mediaUrl?: StringNullableWithAggregatesFilter<"InstagramMedia"> | string | null
    thumbnailUrl?: StringNullableWithAggregatesFilter<"InstagramMedia"> | string | null
    caption?: StringNullableWithAggregatesFilter<"InstagramMedia"> | string | null
    externalLink?: StringNullableWithAggregatesFilter<"InstagramMedia"> | string | null
    permalink?: StringNullableWithAggregatesFilter<"InstagramMedia"> | string | null
    timestamp?: DateTimeNullableWithAggregatesFilter<"InstagramMedia"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InstagramMedia"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InstagramMedia"> | Date | string
  }

  export type InstagramMediaInsightsWhereInput = {
    AND?: InstagramMediaInsightsWhereInput | InstagramMediaInsightsWhereInput[]
    OR?: InstagramMediaInsightsWhereInput[]
    NOT?: InstagramMediaInsightsWhereInput | InstagramMediaInsightsWhereInput[]
    id?: IntFilter<"InstagramMediaInsights"> | number
    mediaId?: StringFilter<"InstagramMediaInsights"> | string
    likes?: IntFilter<"InstagramMediaInsights"> | number
    comments?: IntFilter<"InstagramMediaInsights"> | number
    shares?: IntFilter<"InstagramMediaInsights"> | number
    plays?: IntFilter<"InstagramMediaInsights"> | number
    reach?: IntFilter<"InstagramMediaInsights"> | number
    impressions?: IntFilter<"InstagramMediaInsights"> | number
    engagement?: IntFilter<"InstagramMediaInsights"> | number
    createdAt?: DateTimeFilter<"InstagramMediaInsights"> | Date | string
    updatedAt?: DateTimeFilter<"InstagramMediaInsights"> | Date | string
  }

  export type InstagramMediaInsightsOrderByWithRelationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaInsightsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mediaId?: string
    AND?: InstagramMediaInsightsWhereInput | InstagramMediaInsightsWhereInput[]
    OR?: InstagramMediaInsightsWhereInput[]
    NOT?: InstagramMediaInsightsWhereInput | InstagramMediaInsightsWhereInput[]
    likes?: IntFilter<"InstagramMediaInsights"> | number
    comments?: IntFilter<"InstagramMediaInsights"> | number
    shares?: IntFilter<"InstagramMediaInsights"> | number
    plays?: IntFilter<"InstagramMediaInsights"> | number
    reach?: IntFilter<"InstagramMediaInsights"> | number
    impressions?: IntFilter<"InstagramMediaInsights"> | number
    engagement?: IntFilter<"InstagramMediaInsights"> | number
    createdAt?: DateTimeFilter<"InstagramMediaInsights"> | Date | string
    updatedAt?: DateTimeFilter<"InstagramMediaInsights"> | Date | string
  }, "id" | "mediaId">

  export type InstagramMediaInsightsOrderByWithAggregationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InstagramMediaInsightsCountOrderByAggregateInput
    _avg?: InstagramMediaInsightsAvgOrderByAggregateInput
    _max?: InstagramMediaInsightsMaxOrderByAggregateInput
    _min?: InstagramMediaInsightsMinOrderByAggregateInput
    _sum?: InstagramMediaInsightsSumOrderByAggregateInput
  }

  export type InstagramMediaInsightsScalarWhereWithAggregatesInput = {
    AND?: InstagramMediaInsightsScalarWhereWithAggregatesInput | InstagramMediaInsightsScalarWhereWithAggregatesInput[]
    OR?: InstagramMediaInsightsScalarWhereWithAggregatesInput[]
    NOT?: InstagramMediaInsightsScalarWhereWithAggregatesInput | InstagramMediaInsightsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    mediaId?: StringWithAggregatesFilter<"InstagramMediaInsights"> | string
    likes?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    comments?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    shares?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    plays?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    reach?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    impressions?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    engagement?: IntWithAggregatesFilter<"InstagramMediaInsights"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InstagramMediaInsights"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InstagramMediaInsights"> | Date | string
  }

  export type FacebookMediaWhereInput = {
    AND?: FacebookMediaWhereInput | FacebookMediaWhereInput[]
    OR?: FacebookMediaWhereInput[]
    NOT?: FacebookMediaWhereInput | FacebookMediaWhereInput[]
    id?: IntFilter<"FacebookMedia"> | number
    facebookUserId?: StringFilter<"FacebookMedia"> | string
    mediaId?: StringFilter<"FacebookMedia"> | string
    mediaType?: StringNullableFilter<"FacebookMedia"> | string | null
    mediaUrl?: StringNullableFilter<"FacebookMedia"> | string | null
    caption?: StringNullableFilter<"FacebookMedia"> | string | null
    permalink?: StringNullableFilter<"FacebookMedia"> | string | null
    timestamp?: DateTimeNullableFilter<"FacebookMedia"> | Date | string | null
    createdAt?: DateTimeFilter<"FacebookMedia"> | Date | string
    updatedAt?: DateTimeFilter<"FacebookMedia"> | Date | string
  }

  export type FacebookMediaOrderByWithRelationInput = {
    id?: SortOrder
    facebookUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrderInput | SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    permalink?: SortOrderInput | SortOrder
    timestamp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mediaId?: string
    AND?: FacebookMediaWhereInput | FacebookMediaWhereInput[]
    OR?: FacebookMediaWhereInput[]
    NOT?: FacebookMediaWhereInput | FacebookMediaWhereInput[]
    facebookUserId?: StringFilter<"FacebookMedia"> | string
    mediaType?: StringNullableFilter<"FacebookMedia"> | string | null
    mediaUrl?: StringNullableFilter<"FacebookMedia"> | string | null
    caption?: StringNullableFilter<"FacebookMedia"> | string | null
    permalink?: StringNullableFilter<"FacebookMedia"> | string | null
    timestamp?: DateTimeNullableFilter<"FacebookMedia"> | Date | string | null
    createdAt?: DateTimeFilter<"FacebookMedia"> | Date | string
    updatedAt?: DateTimeFilter<"FacebookMedia"> | Date | string
  }, "id" | "mediaId">

  export type FacebookMediaOrderByWithAggregationInput = {
    id?: SortOrder
    facebookUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrderInput | SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    caption?: SortOrderInput | SortOrder
    permalink?: SortOrderInput | SortOrder
    timestamp?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookMediaCountOrderByAggregateInput
    _avg?: FacebookMediaAvgOrderByAggregateInput
    _max?: FacebookMediaMaxOrderByAggregateInput
    _min?: FacebookMediaMinOrderByAggregateInput
    _sum?: FacebookMediaSumOrderByAggregateInput
  }

  export type FacebookMediaScalarWhereWithAggregatesInput = {
    AND?: FacebookMediaScalarWhereWithAggregatesInput | FacebookMediaScalarWhereWithAggregatesInput[]
    OR?: FacebookMediaScalarWhereWithAggregatesInput[]
    NOT?: FacebookMediaScalarWhereWithAggregatesInput | FacebookMediaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FacebookMedia"> | number
    facebookUserId?: StringWithAggregatesFilter<"FacebookMedia"> | string
    mediaId?: StringWithAggregatesFilter<"FacebookMedia"> | string
    mediaType?: StringNullableWithAggregatesFilter<"FacebookMedia"> | string | null
    mediaUrl?: StringNullableWithAggregatesFilter<"FacebookMedia"> | string | null
    caption?: StringNullableWithAggregatesFilter<"FacebookMedia"> | string | null
    permalink?: StringNullableWithAggregatesFilter<"FacebookMedia"> | string | null
    timestamp?: DateTimeNullableWithAggregatesFilter<"FacebookMedia"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FacebookMedia"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FacebookMedia"> | Date | string
  }

  export type FacebookMediaInsightsWhereInput = {
    AND?: FacebookMediaInsightsWhereInput | FacebookMediaInsightsWhereInput[]
    OR?: FacebookMediaInsightsWhereInput[]
    NOT?: FacebookMediaInsightsWhereInput | FacebookMediaInsightsWhereInput[]
    id?: IntFilter<"FacebookMediaInsights"> | number
    mediaId?: StringFilter<"FacebookMediaInsights"> | string
    likes?: IntFilter<"FacebookMediaInsights"> | number
    comments?: IntFilter<"FacebookMediaInsights"> | number
    shares?: IntFilter<"FacebookMediaInsights"> | number
    reach?: IntFilter<"FacebookMediaInsights"> | number
    impressions?: IntFilter<"FacebookMediaInsights"> | number
    engagement?: IntFilter<"FacebookMediaInsights"> | number
    createdAt?: DateTimeFilter<"FacebookMediaInsights"> | Date | string
    updatedAt?: DateTimeFilter<"FacebookMediaInsights"> | Date | string
  }

  export type FacebookMediaInsightsOrderByWithRelationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaInsightsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    mediaId?: string
    AND?: FacebookMediaInsightsWhereInput | FacebookMediaInsightsWhereInput[]
    OR?: FacebookMediaInsightsWhereInput[]
    NOT?: FacebookMediaInsightsWhereInput | FacebookMediaInsightsWhereInput[]
    likes?: IntFilter<"FacebookMediaInsights"> | number
    comments?: IntFilter<"FacebookMediaInsights"> | number
    shares?: IntFilter<"FacebookMediaInsights"> | number
    reach?: IntFilter<"FacebookMediaInsights"> | number
    impressions?: IntFilter<"FacebookMediaInsights"> | number
    engagement?: IntFilter<"FacebookMediaInsights"> | number
    createdAt?: DateTimeFilter<"FacebookMediaInsights"> | Date | string
    updatedAt?: DateTimeFilter<"FacebookMediaInsights"> | Date | string
  }, "id" | "mediaId">

  export type FacebookMediaInsightsOrderByWithAggregationInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookMediaInsightsCountOrderByAggregateInput
    _avg?: FacebookMediaInsightsAvgOrderByAggregateInput
    _max?: FacebookMediaInsightsMaxOrderByAggregateInput
    _min?: FacebookMediaInsightsMinOrderByAggregateInput
    _sum?: FacebookMediaInsightsSumOrderByAggregateInput
  }

  export type FacebookMediaInsightsScalarWhereWithAggregatesInput = {
    AND?: FacebookMediaInsightsScalarWhereWithAggregatesInput | FacebookMediaInsightsScalarWhereWithAggregatesInput[]
    OR?: FacebookMediaInsightsScalarWhereWithAggregatesInput[]
    NOT?: FacebookMediaInsightsScalarWhereWithAggregatesInput | FacebookMediaInsightsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    mediaId?: StringWithAggregatesFilter<"FacebookMediaInsights"> | string
    likes?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    comments?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    shares?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    reach?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    impressions?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    engagement?: IntWithAggregatesFilter<"FacebookMediaInsights"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FacebookMediaInsights"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FacebookMediaInsights"> | Date | string
  }

  export type UserProfileCreateInput = {
    platformId: string
    name?: string | null
    email?: string | null
    username?: string | null
    accountType?: string | null
    platform: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUncheckedCreateInput = {
    id?: number
    platformId: string
    name?: string | null
    email?: string | null
    username?: string | null
    accountType?: string | null
    platform: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    platformId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: number
    platformId: string
    name?: string | null
    email?: string | null
    username?: string | null
    accountType?: string | null
    platform: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    platformId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    platformId?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    username?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    platform?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaCreateInput = {
    instagramUserId: string
    mediaId: string
    mediaType?: string | null
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    caption?: string | null
    externalLink?: string | null
    permalink?: string | null
    timestamp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstagramMediaUncheckedCreateInput = {
    id?: number
    instagramUserId: string
    mediaId: string
    mediaType?: string | null
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    caption?: string | null
    externalLink?: string | null
    permalink?: string | null
    timestamp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstagramMediaUpdateInput = {
    instagramUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    externalLink?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    instagramUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    externalLink?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaCreateManyInput = {
    id?: number
    instagramUserId: string
    mediaId: string
    mediaType?: string | null
    mediaUrl?: string | null
    thumbnailUrl?: string | null
    caption?: string | null
    externalLink?: string | null
    permalink?: string | null
    timestamp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstagramMediaUpdateManyMutationInput = {
    instagramUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    externalLink?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    instagramUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    thumbnailUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    externalLink?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaInsightsCreateInput = {
    mediaId: string
    likes?: number
    comments?: number
    shares?: number
    plays?: number
    reach?: number
    impressions?: number
    engagement?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstagramMediaInsightsUncheckedCreateInput = {
    id?: number
    mediaId: string
    likes?: number
    comments?: number
    shares?: number
    plays?: number
    reach?: number
    impressions?: number
    engagement?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstagramMediaInsightsUpdateInput = {
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaInsightsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaInsightsCreateManyInput = {
    id?: number
    mediaId: string
    likes?: number
    comments?: number
    shares?: number
    plays?: number
    reach?: number
    impressions?: number
    engagement?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InstagramMediaInsightsUpdateManyMutationInput = {
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InstagramMediaInsightsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    plays?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaCreateInput = {
    facebookUserId: string
    mediaId: string
    mediaType?: string | null
    mediaUrl?: string | null
    caption?: string | null
    permalink?: string | null
    timestamp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMediaUncheckedCreateInput = {
    id?: number
    facebookUserId: string
    mediaId: string
    mediaType?: string | null
    mediaUrl?: string | null
    caption?: string | null
    permalink?: string | null
    timestamp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMediaUpdateInput = {
    facebookUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    facebookUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaCreateManyInput = {
    id?: number
    facebookUserId: string
    mediaId: string
    mediaType?: string | null
    mediaUrl?: string | null
    caption?: string | null
    permalink?: string | null
    timestamp?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMediaUpdateManyMutationInput = {
    facebookUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    facebookUserId?: StringFieldUpdateOperationsInput | string
    mediaId?: StringFieldUpdateOperationsInput | string
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    permalink?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaInsightsCreateInput = {
    mediaId: string
    likes?: number
    comments?: number
    shares?: number
    reach?: number
    impressions?: number
    engagement?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMediaInsightsUncheckedCreateInput = {
    id?: number
    mediaId: string
    likes?: number
    comments?: number
    shares?: number
    reach?: number
    impressions?: number
    engagement?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMediaInsightsUpdateInput = {
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaInsightsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaInsightsCreateManyInput = {
    id?: number
    mediaId: string
    likes?: number
    comments?: number
    shares?: number
    reach?: number
    impressions?: number
    engagement?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMediaInsightsUpdateManyMutationInput = {
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMediaInsightsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mediaId?: StringFieldUpdateOperationsInput | string
    likes?: IntFieldUpdateOperationsInput | number
    comments?: IntFieldUpdateOperationsInput | number
    shares?: IntFieldUpdateOperationsInput | number
    reach?: IntFieldUpdateOperationsInput | number
    impressions?: IntFieldUpdateOperationsInput | number
    engagement?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    accountType?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    accountType?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    platformId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    username?: SortOrder
    accountType?: SortOrder
    platform?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type InstagramMediaCountOrderByAggregateInput = {
    id?: SortOrder
    instagramUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
    caption?: SortOrder
    externalLink?: SortOrder
    permalink?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type InstagramMediaMaxOrderByAggregateInput = {
    id?: SortOrder
    instagramUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
    caption?: SortOrder
    externalLink?: SortOrder
    permalink?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaMinOrderByAggregateInput = {
    id?: SortOrder
    instagramUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrder
    mediaUrl?: SortOrder
    thumbnailUrl?: SortOrder
    caption?: SortOrder
    externalLink?: SortOrder
    permalink?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type InstagramMediaInsightsCountOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaInsightsAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
  }

  export type InstagramMediaInsightsMaxOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaInsightsMinOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InstagramMediaInsightsSumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    plays?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
  }

  export type FacebookMediaCountOrderByAggregateInput = {
    id?: SortOrder
    facebookUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrder
    mediaUrl?: SortOrder
    caption?: SortOrder
    permalink?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookMediaMaxOrderByAggregateInput = {
    id?: SortOrder
    facebookUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrder
    mediaUrl?: SortOrder
    caption?: SortOrder
    permalink?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaMinOrderByAggregateInput = {
    id?: SortOrder
    facebookUserId?: SortOrder
    mediaId?: SortOrder
    mediaType?: SortOrder
    mediaUrl?: SortOrder
    caption?: SortOrder
    permalink?: SortOrder
    timestamp?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookMediaInsightsCountOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaInsightsAvgOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
  }

  export type FacebookMediaInsightsMaxOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaInsightsMinOrderByAggregateInput = {
    id?: SortOrder
    mediaId?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMediaInsightsSumOrderByAggregateInput = {
    id?: SortOrder
    likes?: SortOrder
    comments?: SortOrder
    shares?: SortOrder
    reach?: SortOrder
    impressions?: SortOrder
    engagement?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserProfileDefaultArgs instead
     */
    export type UserProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstagramMediaDefaultArgs instead
     */
    export type InstagramMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstagramMediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstagramMediaInsightsDefaultArgs instead
     */
    export type InstagramMediaInsightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InstagramMediaInsightsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacebookMediaDefaultArgs instead
     */
    export type FacebookMediaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacebookMediaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FacebookMediaInsightsDefaultArgs instead
     */
    export type FacebookMediaInsightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FacebookMediaInsightsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}